import React, { useEffect, useState } from "react";
import { View, Text, ScrollView, TouchableOpacity, Modal, TextInput } from "react-native";
import { styles } from "./styles";
import { getDiaries, createDiary, updateDiary } from "../../services/diaryService";
import { supabase } from "../../lib/supabase";

export default function Diary() {
    const [user, setUser] = useState(null);
    const [diaries, setDiaries] = useState([]);
    const [modalVisible, setModalVisible] = useState(false);
    const [answers, setAnswers] = useState({});
    const [todayDiary, setTodayDiary] = useState(null);

    const questions = [
        { id: "cafe", label: "O que você comeu de café da manhã?" },
        { id: "estudo", label: "O que você estudou hoje?" },
        { id: "atividade", label: "Qual atividade realizou hoje?" },
        { id: "livre", label: "Livre!!!" }
    ];

    useEffect(() => {
        fetchUser();
    }, []);

    async function fetchUser() {
        const { data, error } = await supabase.auth.getUser();
        if (error) {
        console.error("Erro ao pegar usuário:", error);
        return;
        }
        setUser(data.user);
        if (data.user) loadDiaries(data.user.id);
    }

    async function loadDiaries(user_id) {
        const data = await getDiaries(user_id);
        setDiaries(data);

        const today = new Date().toISOString().split("T")[0];
        const todayEntry = data.find((d) => d.data_registro.startsWith(today));
        setTodayDiary(todayEntry || null);

        if (todayEntry && todayEntry.conteudo) {
        try {
            setAnswers(JSON.parse(todayEntry.conteudo));
        } catch {
            setAnswers({});
        }
        } else {
        setAnswers({});
        }
    }

    async function saveTodayDiary() {
        if (!user) return;

        const contentToSave = JSON.stringify(answers);

        if (todayDiary) {
        await updateDiary(todayDiary.id, contentToSave);
        } else {
        await createDiary({ user_id: user.id, titulo: "Dia Atual", conteudo: contentToSave });
        }

        setModalVisible(false);
        loadDiaries(user.id);
    }

    return (
        <View style={styles.container}>
        <ScrollView style={styles.diaryList}>
            {diaries.map((d) => {
            let diaryData = {};
            try {
                diaryData = JSON.parse(d.conteudo);
            } catch {}
            return (
                <View key={d.id} style={styles.diaryItem}>
                <Text style={styles.diaryDate}>
                    {new Date(d.data_registro).toLocaleDateString("pt-BR")}
                </Text>
                {Object.keys(diaryData).map((key) => (
                    <View key={key} style={{ marginBottom: 6 }}>
                    <Text style={styles.diaryQuestion}>
                        {questions.find((q) => q.id === key)?.label}
                    </Text>
                    <Text style={styles.diaryAnswer}>{diaryData[key]}</Text>
                    </View>
                ))}
                </View>
            );
            })}
        </ScrollView>

        <TouchableOpacity style={styles.fab} onPress={() => setModalVisible(true)}>
            <Text style={styles.fabText}>+</Text>
        </TouchableOpacity>

        {/* Modal */}
            <Modal visible={modalVisible} animationType="slide" transparent>
                <View style={styles.modalOverlay}>
                    <View style={styles.modalContent}>
                        <Text style={styles.modalTitle}>Preencha seu dia</Text>
                            <ScrollView>
                                {questions.map((q) => (
                                    <View key={q.id} style={{ marginBottom: 12 }}>
                                    <Text style={styles.modalQuestion}>{q.label}</Text>
                                    <TextInput
                                        style={styles.textArea}
                                        multiline
                                        value={answers[q.id] || ""}
                                        onChangeText={(text) =>
                                        setAnswers((prev) => ({ ...prev, [q.id]: text }))
                                        }
                                    />
                                    </View>
                                ))}
                            </ScrollView>
                            <TouchableOpacity style={styles.saveButton} onPress={saveTodayDiary}>
                                <Text style={styles.saveButtonText}>Salvar</Text>
                            </TouchableOpacity>
                            <TouchableOpacity
                                style={styles.cancelButton}
                                onPress={() => setModalVisible(false)}
                            >
                                <Text style={styles.cancelButtonText}>Cancelar</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
            </Modal>
        </View>
    );
}
