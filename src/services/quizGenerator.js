// /services/quizGenerator.js
// ================================================
// Gerador de perguntas a partir do conte√∫do do di√°rio.
// N√≠vel 1 (local): funciona 100% offline, com base em listas pr√©-definidas.
// Estruturado para expans√£o com IA futuramente (n√≠vel 2 e 3).
// ================================================

// üîπ Fun√ß√£o principal
export function generateQuestionsFromDiary(text) {
    if (!text || text.trim().length === 0) return [];

    // Extrai as "entidades" (conceitos principais)
    const entities = extractEntities(text);

    // Cria perguntas baseadas no que foi encontrado
    const questions = [];

    if (entities.food.length > 0) {
        questions.push({
        pergunta: "O que voc√™ comeu hoje?",
        respostaCorreta: entities.food[0],
        opcoes: shuffle([
            entities.food[0],
            "mam√£o",
            "p√£o com queijo",
            "nescau",
        ]),
        categoria: "alimenta√ß√£o",
        });
    }

    if (entities.feeling.length > 0) {
        questions.push({
        pergunta: "Como voc√™ se sentiu hoje?",
        respostaCorreta: entities.feeling[0],
        opcoes: shuffle([
            entities.feeling[0],
            "neutro",
            "animado",
            "cansado",
        ]),
        categoria: "emo√ß√£o",
        });
    }

    if (entities.activity.length > 0) {
        questions.push({
        pergunta: "Qual atividade voc√™ realizou hoje?",
        respostaCorreta: entities.activity[0],
        opcoes: shuffle([
            entities.activity[0],
            "descansar",
            "ir √† escola",
            "assistir TV",
        ]),
        categoria: "atividade",
        });
    }

    if (entities.place.length > 0) {
        questions.push({
        pergunta: "Onde voc√™ esteve hoje?",
        respostaCorreta: entities.place[0],
        opcoes: shuffle([
            entities.place[0],
            "em casa",
            "na escola",
            "no parque",
        ]),
        categoria: "local",
        });
    }

    // Se n√£o encontrar nada relevante, gera uma gen√©rica
    if (questions.length === 0) {
        questions.push({
        pergunta: "Voc√™ se lembra do que fez hoje?",
        respostaCorreta: "Sim",
        opcoes: shuffle(["Sim", "N√£o", "Um pouco", "N√£o lembro"]),
        categoria: "geral",
        });
    }

    return questions;
}

// ================================================
// Extrai palavras importantes com base em listas.
// Voc√™ pode expandir facilmente estas listas depois.
// ================================================
export function extractEntities(text) {
    const lower = text.toLowerCase();

    const foods = [
        "p√£o", "manteiga", "requeij√£o", "caf√©", "arroz", "feij√£o", "mam√£o",
        "banana", "nescau", "leite", "bolo", "fruta", "suco", "tapioca"
    ];
    const feelings = [
        "feliz", "triste", "cansado", "animado", "ansioso", "calmo", "irritado", "entediado"
    ];
    const activities = [
        "estudar", "trabalhar", "nadar", "correr", "dormir", "ler", "jogar", "assistir", "cozinhar"
    ];
    const places = [
        "escola", "trabalho", "praia", "academia", "casa", "shopping", "parque", "igreja"
    ];

    const found = {
        food: foods.filter(f => lower.includes(f)),
        feeling: feelings.filter(f => lower.includes(f)),
        activity: activities.filter(f => lower.includes(f)),
        place: places.filter(f => lower.includes(f)),
    };

    return found;
}

// ================================================
// Fun√ß√£o auxiliar para embaralhar arrays
// ================================================
function shuffle(arr) {
    return arr.sort(() => Math.random() - 0.5);
}

// ================================================
// FUTURO: Integra√ß√£o com IA (n√≠vel 2)
// -----------------------------------------------
// Voc√™ pode substituir o conte√∫do da fun√ß√£o `generateQuestionsFromDiary`
// por uma chamada a uma Edge Function do Supabase:
//
// const res = await fetch(`${SUPABASE_URL}/functions/v1/generate-diary-quiz`, {
//   method: "POST",
//   headers: { "Content-Type": "application/json" },
//   body: JSON.stringify({ conteudo: text }),
// });
// const data = await res.json();
// return data.questions;
//
// ================================================
